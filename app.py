import streamlit as st
import pandas as pd
import hashlib
from utils.google_sheets import (
    read_sheet_to_dataframe,
    get_user_by_login,
    register_user,
    update_row_in_sheet,
    delete_row_in_sheet
)

# ==================================================
# CONFIGURA√á√ïES
# ==================================================
SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1VZpV97NIhd16jAyzMpVE_8VhSs-bSqi4DXmySsx2Kc4/edit#gid=761491838"
WORKSHEET_DATA = "Cronograma"
WORKSHEET_USERS = "Usu√°rios"

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Sistema de Cronograma", 
    layout="wide",
    page_icon="üìÖ"
)

# ==================================================
# FUN√á√ïES DE AUTENTICA√á√ÉO
# ==================================================
def hash_password(password):
    """Cria hash SHA-256 da senha"""
    return hashlib.sha256(password.encode()).hexdigest()

def check_login(login, password):
    """Verifica as credenciais do usu√°rio"""
    user = get_user_by_login(SPREADSHEET_URL, WORKSHEET_USERS, login)
    if user and user.get('Senha') == hash_password(password):
        return True, user
    return False, None

def show_login_form():
    """Exibe o formul√°rio de login"""
    st.title("üîí Acesso ao Sistema")
    
    with st.form("login_form"):
        login = st.text_input("Login")
        password = st.text_input("Senha", type="password")
        submitted = st.form_submit_button("Entrar")
        
        if submitted:
            if not login or not password:
                st.error("Preencha todos os campos!")
            else:
                success, user = check_login(login, password)
                if success:
                    st.session_state['logged_in'] = True
                    st.session_state['user'] = user
                    st.rerun()
                else:
                    st.error("Login ou senha incorretos!")
    
    if st.button("N√£o tem conta? Cadastre-se"):
        st.session_state['show_register'] = True
        st.rerun()

def show_register_form():
    """Exibe o formul√°rio de cadastro"""
    st.title("üìù Cadastro de Usu√°rio")
    
    with st.form("register_form"):
        col1, col2 = st.columns(2)
        with col1:
            login = st.text_input("Login*")
            password = st.text_input("Senha*", type="password")
        with col2:
            email = st.text_input("Email*")
            confirm_password = st.text_input("Confirmar Senha*", type="password")
        
        user_type = st.selectbox("Tipo de Usu√°rio", ["Usu√°rio", "Administrador"])
        
        submitted = st.form_submit_button("Cadastrar")
        
        if submitted:
            if not all([login, email, password, confirm_password]):
                st.error("Preencha todos os campos obrigat√≥rios!")
            elif password != confirm_password:
                st.error("As senhas n√£o coincidem!")
            elif len(password) < 6:
                st.error("A senha deve ter pelo menos 6 caracteres")
            else:
                user_data = {
                    'Login': login,
                    'Email': email,
                    'Senha': hash_password(password),
                    'Tipo de Usu√°rio': user_type
                }
                success, message = register_user(SPREADSHEET_URL, WORKSHEET_USERS, user_data)
                if success:
                    st.success("Cadastro realizado! Fa√ßa login.")
                    st.session_state['show_register'] = False
                    st.rerun()
                else:
                    st.error(message)
    
    if st.button("Voltar para Login"):
        st.session_state['show_register'] = False
        st.rerun()

# ==================================================
# FUN√á√ïES PRINCIPAIS DO SISTEMA
# ==================================================
@st.cache_data(ttl=300)
def load_data(user_email=None):
    """Carrega os dados do cronograma com filtro opcional por e-mail"""
    df = read_sheet_to_dataframe(
        SPREADSHEET_URL, 
        WORKSHEET_DATA,
        user_email
    )
    # Garante que o DataFrame tenha um √≠ndice √∫nico para edi√ß√£o/exclus√£o
    if df is not None and not df.empty:
        # Preserva o √≠ndice original para uso em opera√ß√µes de edi√ß√£o/exclus√£o
        df['_original_index'] = df.index
    return df

def get_filter_options(df, column, previous_filters=None):
    """
    Gera op√ß√µes para os filtros din√¢micos incluindo 'Todos',
    considerando os filtros j√° aplicados
    """
    try:
        # Se houver filtros anteriores, aplica-os para filtrar o dataframe
        filtered_df = df.copy()
        if previous_filters:
            for col, val in previous_filters.items():
                if val != "Todos" and col in filtered_df.columns:
                    if col == 'Descri√ß√£o Meta':
                        # Para Descri√ß√£o Meta, remove a parte "..." se estiver presente
                        search_value = str(val).replace("...", "")
                        # Usa busca por substring (cont√©m) em vez de igualdade exata
                        filtered_df = filtered_df[filtered_df[col].astype(str).str.contains(search_value, case=False, na=False)]
                    else:
                        # Para outros campos, mant√©m a compara√ß√£o de igualdade exata
                        filtered_df = filtered_df[filtered_df[col].astype(str) == str(val)]
        
        # Remove valores nulos e duplicados do dataframe filtrado
        unique_values = filtered_df[column].dropna().unique()
        
        # Tratamento especial para Descri√ß√£o Meta - truncar textos longos
        if column == 'Descri√ß√£o Meta':
            # Limita o n√∫mero de op√ß√µes para evitar listas muito grandes
            max_options = 15
            # Trunca descri√ß√µes longas para exibi√ß√£o no dropdown
            options = ["Todos"] + [f"{str(x)[:50]}..." if len(str(x)) > 50 else str(x) 
                                  for x in unique_values[:max_options] 
                                  if x not in [None, "", " "]]
        else:
            # Para outras colunas, mant√©m o comportamento normal
            options = ["Todos"] + sorted([str(x) for x in unique_values if x not in [None, "", " "]])
        
        return options
    except KeyError:
        st.error(f"Coluna '{column}' n√£o encontrada na planilha")
        return ["Todos"]
    except Exception as e:
        st.error(f"Erro ao gerar op√ß√µes para {column}: {str(e)}")
        return ["Todos"]

def create_dynamic_filters(df, filter_columns):
    """
    Cria os controles de filtro din√¢mico e retorna os valores selecionados
    Filtros s√£o interligados e afetam as op√ß√µes uns dos outros
    """
    filters = {}
    col_objects = st.columns(len(filter_columns))

    # Inicializando o estado dos filtros se n√£o existir
    if 'filter_state' not in st.session_state:
        st.session_state['filter_state'] = {col: "Todos" for col in filter_columns}
    
    # Fun√ß√£o para atualizar o estado quando um filtro √© alterado
    def on_filter_change(column):
        # Atualiza o valor no estado da sess√£o
        st.session_state['filter_state'][column] = st.session_state[f"filter_{column}"]
        # Reseta os filtros posteriores para evitar sele√ß√µes inv√°lidas
        for i, col in enumerate(filter_columns):
            if filter_columns.index(column) < i:
                st.session_state['filter_state'][col] = "Todos"
                st.session_state[f"filter_{col}"] = "Todos"
    
    # Cria os filtros em ordem
    for i, column in enumerate(filter_columns):
        with col_objects[i]:
            try:
                # Obt√©m as op√ß√µes considerando os filtros anteriores
                previous_filters = {
                    col: st.session_state['filter_state'][col] 
                    for col in filter_columns[:i]
                    if st.session_state['filter_state'][col] != "Todos"
                }
                
                options = get_filter_options(df, column, previous_filters)
                
                # Se o valor atual n√£o est√° nas op√ß√µes, reseta para "Todos"
                current_value = st.session_state['filter_state'][column]
                if current_value not in options:
                    current_value = "Todos"
                    st.session_state['filter_state'][column] = "Todos"
                
                # Cria o selectbox com as op√ß√µes filtradas
                filters[column] = st.selectbox(
                    f"Filtrar por {column}",
                    options=options,
                    key=f"filter_{column}",
                    on_change=lambda col=column: on_filter_change(col),
                    index=options.index(current_value) if current_value in options else 0
                )
            except KeyError:
                st.error(f"Coluna '{column}' n√£o encontrada")
                filters[column] = "Todos"
    
    return filters

def apply_dynamic_filters(df, filters):
    """Aplica m√∫ltiplos filtros ao DataFrame de forma segura"""
    try:
        filtered_df = df.copy()
        for column, value in filters.items():
            if value != "Todos" and column in filtered_df.columns:
                if column == 'Descri√ß√£o Meta':
                    # Para Descri√ß√£o Meta, remove a parte "..." se estiver presente
                    search_value = str(value).replace("...", "")
                    # Usa busca por substring (cont√©m) em vez de igualdade exata
                    filtered_df = filtered_df[filtered_df[column].astype(str).str.contains(search_value, case=False, na=False)]
                else:
                    # Para outros campos, mant√©m a compara√ß√£o de igualdade exata
                    filtered_df = filtered_df[filtered_df[column].astype(str) == str(value)]
        return filtered_df
    except KeyError as e:
        st.error(f"Erro: Coluna '{e.args[0]}' n√£o existe na planilha")
        return df
    except Exception as e:
        st.error(f"Erro ao filtrar dados: {str(e)}")
        return df

# ==================================================
# FUN√á√ïES DOS MODAIS
# ==================================================
def show_edit_modal(row):
    """Modal de edi√ß√£o"""
    with st.expander(f"üìù Editando: {row['Refer√™ncia']}", expanded=True):
        with st.form(f"edit_form_{row.name}"):
            # Campos edit√°veis (ajuste conforme suas colunas)
            col1, col2 = st.columns(2)
            with col1:
                referencia = st.text_input("Refer√™ncia", value=row.get('Refer√™ncia', ''))
                descricao = st.text_area("Descri√ß√£o Meta", value=row.get('Descri√ß√£o Meta', ''), height=150)
            with col2:
                responsavel = st.text_input("Respons√°vel", value=row.get('Respons√°vel', ''))
                status = st.selectbox(
                    "Status", 
                    options=["Em andamento", "Conclu√≠do", "Pendente"],
                    index=["Em andamento", "Conclu√≠do", "Pendente"].index(row.get('Status', 'Pendente'))
                )
            
            # Determina o n√∫mero da linha na planilha (√≠ndice original + 2 para o cabe√ßalho)
            sheet_row = row.get('_original_index', 0) + 2
            
            if st.form_submit_button("üíæ Salvar Altera√ß√µes"):
                try:
                    # Recupera todas as colunas da planilha para manter a estrutura
                    cols_to_update = {
                        'Refer√™ncia': referencia,
                        'Descri√ß√£o Meta': descricao,
                        'Respons√°vel': responsavel,
                        'Status': status
                    }
                    
                    # Atualiza a planilha
                    updated = update_row_in_sheet(
                        SPREADSHEET_URL,
                        WORKSHEET_DATA,
                        sheet_row,
                        cols_to_update
                    )
                    
                    if updated:
                        st.success("Registro atualizado com sucesso!")
                        # Limpa o cache para for√ßar recarregamento dos dados
                        st.cache_data.clear()
                        # Remove o estado de edi√ß√£o
                        if 'editing_row' in st.session_state:
                            del st.session_state['editing_row']
                        st.rerun()
                    else:
                        st.error("Erro ao atualizar o registro.")
                except Exception as e:
                    st.error(f"Erro ao atualizar: {str(e)}")
            
            if st.button("‚ùå Cancelar"):
                if 'editing_row' in st.session_state:
                    del st.session_state['editing_row']
                st.rerun()

def show_delete_modal(row):
    """Modal de exclus√£o"""
    with st.expander(f"üóëÔ∏è Excluir: {row['Refer√™ncia']}", expanded=True):
        st.warning("Tem certeza que deseja excluir este registro?")
        
        # Exibe um resumo dos dados para confirma√ß√£o
        col1, col2 = st.columns(2)
        with col1:
            st.markdown(f"**Refer√™ncia:** {row.get('Refer√™ncia', 'N/A')}")
            st.markdown(f"**Descri√ß√£o:** {row.get('Descri√ß√£o Meta', 'N/A')}")
        with col2:
            st.markdown(f"**Respons√°vel:** {row.get('Respons√°vel', 'N/A')}")
            st.markdown(f"**Status:** {row.get('Status', 'N/A')}")
        
        # Determina o n√∫mero da linha na planilha
        sheet_row = row.get('_original_index', 0) + 2
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚úÖ Confirmar Exclus√£o", type="primary"):
                try:
                    deleted = delete_row_in_sheet(
                        SPREADSHEET_URL,
                        WORKSHEET_DATA,
                        sheet_row
                    )
                    if deleted:
                        st.success("Registro exclu√≠do com sucesso!")
                        # Limpa o cache para for√ßar recarregamento dos dados
                        st.cache_data.clear()
                        if 'deleting_row' in st.session_state:
                            del st.session_state['deleting_row']
                        st.rerun()
                    else:
                        st.error("Erro ao excluir o registro.")
                except Exception as e:
                    st.error(f"Erro ao excluir: {str(e)}")
        
        with col2:
            if st.button("‚ùå Cancelar"):
                if 'deleting_row' in st.session_state:
                    del st.session_state['deleting_row']
                st.rerun()

def show_details_modal(row):
    """Modal de detalhes"""
    with st.expander(f"üîç Detalhes: {row['Refer√™ncia']}", expanded=True):
        # Exibe todos os dados dispon√≠veis de forma formatada
        for col, val in row.items():
            # Ignora colunas internas e metadados
            if col != '_original_index':
                st.markdown(f"**{col}:** {val}")
        
        if st.button("‚¨ÖÔ∏è Voltar"):
            if 'viewing_row' in st.session_state:
                del st.session_state['viewing_row']
            st.rerun()

# ==================================================
# FUN√á√ÉO PRINCIPAL DO SISTEMA
# ==================================================
def show_main_app():
    """Conte√∫do principal ap√≥s login"""
    # Verifica√ß√£o de seguran√ßa
    if 'user' not in st.session_state:
        st.error("Sess√£o inv√°lida. Redirecionando para login...")
        st.session_state.clear()
        st.rerun()
    
    user = st.session_state['user']
    is_admin = user.get('Tipo de Usu√°rio') == "Administrador"
    user_email = None if is_admin else user.get('Email')
    
    # Barra superior com informa√ß√µes do usu√°rio
    col1, col2 = st.columns([3, 1])
    with col1:
        st.title("üìÖ Sistema de Cronograma")
    with col2:
        st.write(f"üë§ **Usu√°rio:** {user.get('Login')}")
        st.write(f"üîë **Tipo:** {user.get('Tipo de Usu√°rio')}")
        if st.button("üö™ Sair"):
            st.session_state.clear()
            st.rerun()
    
    # Carrega dados
    df = load_data(user_email)
    
    if df is None:
        st.error("Erro ao carregar dados. Verifique sua conex√£o.")
        return
    
    if df.empty:
        st.warning("Nenhum dado encontrado na planilha.")
        return
    
    # Define colunas para filtros (substituindo Status por Descri√ß√£o Meta)
    filter_columns = ['Refer√™ncia', 'Setor', 'Respons√°vel', 'Descri√ß√£o Meta']
    
    # Se√ß√£o de filtros
    st.header("Filtros Avan√ßados", divider="rainbow")
    filters = create_dynamic_filters(df, filter_columns)
    
    # Aplica filtros
    filtered_df = apply_dynamic_filters(df, filters)
    
    # Exibe resultados
    st.header("Resultados", divider="rainbow")
    st.subheader(f"üìä Total de registros: {len(filtered_df)}")
    
    # Adicionar novo registro
    if st.button("‚ûï Adicionar Novo Registro"):
        st.session_state['adding_row'] = True
    
    # Modal para adicionar novo registro
    if st.session_state.get('adding_row', False):
        with st.expander("‚ûï Novo Registro", expanded=True):
            with st.form("add_form"):
                col1, col2 = st.columns(2)
                with col1:
                    referencia = st.text_input("Refer√™ncia*")
                    descricao = st.text_area("Descri√ß√£o Meta*", height=150)
                with col2:
                    responsavel = st.text_input("Respons√°vel*")
                    status = st.selectbox(
                        "Status*", 
                        options=["Pendente", "Em andamento", "Conclu√≠do"],
                        index=0
                    )
                    
                if st.form_submit_button("üíæ Salvar"):
                    if not all([referencia, descricao, responsavel]):
                        st.error("Preencha todos os campos obrigat√≥rios!")
                    else:
                        try:
                            # Adiciona o novo registro como √∫ltima linha
                            new_row = {
                                'Refer√™ncia': referencia,
                                'Descri√ß√£o Meta': descricao,
                                'Respons√°vel': responsavel,
                                'Status': status,
                                'E-mail': user.get('Email', '')  # Associa o email do usu√°rio
                            }
                            
                            # Cria uma fun√ß√£o no m√≥dulo utils/google_sheets.py para adicionar linha
                            # Por enquanto, usamos update_row_in_sheet com √≠ndice -1 para adicionar na √∫ltima linha
                            added = update_row_in_sheet(
                                SPREADSHEET_URL,
                                WORKSHEET_DATA,
                                -1,  # -1 indica para adicionar como √∫ltima linha
                                new_row
                            )
                            
                            if added:
                                st.success("Registro adicionado com sucesso!")
                                st.cache_data.clear()
                                del st.session_state['adding_row']
                                st.rerun()
                            else:
                                st.error("Erro ao adicionar registro.")
                        except Exception as e:
                            st.error(f"Erro ao adicionar: {str(e)}")
                
                if st.button("‚ùå Cancelar"):
                    del st.session_state['adding_row']
                    st.rerun()
    
    # Exibe os resultados filtrados em cards
    if not filtered_df.empty:
        for idx, row in filtered_df.iterrows():
            with st.container(border=True):
                # Layout do card
                cols = st.columns([4, 1])
                
                # Coluna esquerda: Dados
                with cols[0]:
                    st.markdown(f"**Refer√™ncia:** `{row.get('Refer√™ncia', 'N/A')}`")
                    st.markdown(f"**Descri√ß√£o:** {row.get('Descri√ß√£o Meta', 'N/A')}")
                    st.markdown(f"**Respons√°vel:** {row.get('Respons√°vel', 'N/A')}")
                    st.markdown(f"**Status:** {row.get('Status', 'N/A')}")
                
                # Coluna direita: Bot√µes de a√ß√£o
                with cols[1]:
                    if st.button("üìù Editar", key=f"edit_{idx}"):
                        st.session_state['editing_row'] = row.to_dict()
                    
                    if st.button("üóëÔ∏è Excluir", key=f"delete_{idx}"):
                        st.session_state['deleting_row'] = row.to_dict()
                    
                    if st.button("üîç Detalhes", key=f"details_{idx}"):
                        st.session_state['viewing_row'] = row.to_dict()
    else:
        st.warning("Nenhum registro corresponde aos filtros selecionados.")
    
    # Processa modais de a√ß√£o
    if 'editing_row' in st.session_state:
        show_edit_modal(pd.Series(st.session_state['editing_row']))
    
    if 'deleting_row' in st.session_state:
        show_delete_modal(pd.Series(st.session_state['deleting_row']))
    
    if 'viewing_row' in st.session_state:
        show_details_modal(pd.Series(st.session_state['viewing_row']))

# ==================================================
# PONTO DE ENTRADA
# ==================================================
def main():
    """Fun√ß√£o principal que controla o fluxo da aplica√ß√£o"""
    # Inicializa vari√°veis de sess√£o
    if 'logged_in' not in st.session_state:
        st.session_state['logged_in'] = False
    if 'show_register' not in st.session_state:
        st.session_state['show_register'] = False
    if 'adding_row' not in st.session_state:
        st.session_state['adding_row'] = False
    
    # Controle de fluxo
    if not st.session_state['logged_in']:
        if st.session_state['show_register']:
            show_register_form()
        else:
            show_login_form()
    else:
        show_main_app()

if __name__ == "__main__":
    main()
